const { useState, useEffect } = React;

// Icon Components (using Font Awesome classes instead of Lucide)
const Icon = ({ name, className = "w-5 h-5" }) => (
  React.createElement('i', { 
    className: name + ' ' + className,
    'aria-hidden': 'true' 
  })
);

const App = () => {
  const [currentView, setCurrentView] = useState('family-home');
  const [selectedChild, setSelectedChild] = useState(null);
  const [selectedClass, setSelectedClass] = useState(null);
  const [editingClass, setEditingClass] = useState(null);
  const [isEditingClass, setIsEditingClass] = useState(false);
  const [availability, setAvailability] = useState({});
  const [classForm, setClassForm] = useState({
    name: '',
    addresses: [{ name: '', address: '' }],
    sessions: [{ day: '', startTime: '', endTime: '', addressIndex: 0 }],
    coachName: '',
    coachPhone: '',
    managerName: '',
    managerPhone: '',
    managerEmail: ''
  });
  const [chatMessages, setChatMessages] = useState([
    {
      id: 1,
      type: 'bot',
      message: 'שלום! אני כאן לעזור לך לנהל שינויים בחוגים. תוכל להדביק הודעות מהוואטסאפ או לכתוב שינויים ישירות.',
      timestamp: new Date().toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit' })
    }
  ]);
  const [chatInput, setChatInput] = useState('');
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [pendingScheduleChange, setPendingScheduleChange] = useState(null);
  const [availabilityStatus, setAvailabilityStatus] = useState({
    'משפחת כהן': false,
    'משפחת לוי': false, 
    'משפחת אברהם': false,
    'משפחת דוד': true,
    'משפחת שלום': false,
    'משפחת חן': false
  });
  const [userGuideSection, setUserGuideSection] = useState('overview');
  const [isClassManager, setIsClassManager] = useState(true);
  const [isAdminMode, setIsAdminMode] = useState(false);
  const [adminPassword, setAdminPassword] = useState('');
  const [showAdminLogin, setShowAdminLogin] = useState(false);
  const [waitingRoomFilters, setWaitingRoomFilters] = useState({
    city: '',
    classType: '',
    searchText: '',
    showFullGroups: false
  });
  const [childForm, setChildForm] = useState({
    name: '',
    birthDate: '',
    phone: '',
    address: ''
  });
  const [weeklyAvailability, setWeeklyAvailability] = useState({
    'ראשון': { morning: false, afternoon: false, evening: false },
    'שני': { morning: false, afternoon: false, evening: false },
    'שלישי': { morning: false, afternoon: false, evening: false },
    'רביעי': { morning: false, afternoon: false, evening: false },
    'חמישי': { morning: false, afternoon: false, evening: false },
    'שישי': { morning: false, afternoon: false, evening: false },
    'שבת': { morning: false, afternoon: false, evening: false }
  });
  // נתוני מערכת מדומים למנהל
  const [systemStats, setSystemStats] = useState({
    totalFamilies: 24,
    totalChildren: 48,
    totalClasses: 12,
    activeTransportGroups: 8,
    pendingRequests: 5,
    emergencyAlerts: 2
  });
  
  const [allFamilies, setAllFamilies] = useState([
    {
      id: 1,
      name: 'משפחת כהן',
      children: 2,
      activeClasses: 3,
      phone: '050-123-4567',
      email: 'cohen@email.com',
      lastActive: '2025-08-16',
      availabilityStatus: 'ממלא זמינות'
    },
    {
      id: 2,
      name: 'משפחת לוי',
      children: 1,
      activeClasses: 2,
      phone: '052-987-6543',
      email: 'levi@email.com',
      lastActive: '2025-08-15',
      availabilityStatus: 'מילא זמינות'
    },
    {
      id: 3,
      name: 'משפחת אברהם',
      children: 3,
      activeClasses: 4,
      phone: '054-111-2222',
      email: 'avraham@email.com',
      lastActive: '2025-08-14',
      availabilityStatus: 'לא מילא זמינות'
    },
    {
      id: 4,
      name: 'משפחת דוד',
      children: 2,
      activeClasses: 2,
      phone: '053-333-4444',
      email: 'david@email.com',
      lastActive: '2025-08-16',
      availabilityStatus: 'מילא זמינות'
    }
  ]);
  
  const [availableClasses, setAvailableClasses] = useState([
    {
      id: 'CLS001',
      name: 'כדורסל',
      city: 'תל אביב',
      location: 'בית ספר אילון',
      address: 'רח׳ הרצל 45, תל אביב',
      coach: 'דוד כהן',
      coachPhone: '052-987-6543',
      schedule: 'ראשון, שלישי, חמישי 16:00-17:30',
      ageGroup: '10-12',
      currentMembers: 5,
      maxMembers: 8,
      manager: 'משפחת לוי',
      managerPhone: '050-111-2222',
      description: 'חוג כדורסל למתחילים, אווירה טובה וחברותית'
    },
    {
      id: 'CLS002', 
      name: 'שחייה',
      city: 'תל אביב',
      location: 'בריכת העיר',
      address: 'רח׳ ביאליק 12, תל אביב',
      coach: 'מירי לוי',
      coachPhone: '054-123-4567',
      schedule: 'שני, רביעי 17:00-18:00',
      ageGroup: '8-14',
      currentMembers: 3,
      maxMembers: 6,
      manager: 'משפחת גרין',
      managerPhone: '050-333-4444',
      description: 'לימוד שחייה בצורה מקצועית ובטוחה'
    }
  ]);
  const [notifications, setNotifications] = useState([
    { id: 1, text: 'תזכורת: מלא זמינות לחוג כדורסל עד מחר בערב', type: 'warning', time: '14:30' },
    { id: 2, text: 'שיבוץ חדש פורסם לחוג שחייה', type: 'info', time: '09:15' }
  ]);

  // נתוני המשפחה והילדים עם החוגים שלהם
  const familyData = {
    familyName: 'משפחת כהן',
    parents: {
      parent1: { name: 'יוסי', phone: '050-123-4567', email: 'yossi@gmail.com' },
      parent2: { name: 'רחל', phone: '052-987-6543', email: 'rachel@gmail.com' }
    },
    children: [
      {
        id: 1,
        name: 'דני כהן',
        birthDate: '2012-08-15',
        phone: '050-111-2222',
        address: 'רח׳ הרצל 123, תל אביב',
        classes: [
          {
            id: 1,
            name: 'כדורסל',
            location: 'בית ספר רמת אביב',
            address: 'רח׳ הרצל 45, תל אביב',
            schedule: 'ראשון, שלישי, חמישי 16:00-17:30',
            coach: 'דוד כהן - 052-987-6543',
            families: [
              { name: 'משפחת כהן', rides: 12, children: ['דני'], parents: { parent1: 'יוסי', parent2: 'רחל' } },
              { name: 'משפחת לוי', rides: 8, children: ['יובל'], parents: { parent1: 'דוד', parent2: 'מירי' } }
            ],
            weeklySchedule: [
              { day: 'ראשון', pickup: 'משפחת כהן', return: 'משפחת לוי', time: '16:00-17:30' },
              { day: 'שלישי', pickup: 'משפחת אברהם', return: 'משפחת דוד', time: '16:00-17:30' }
            ],
            myTasks: [
              { date: 'יום ראשון 15/8', task: 'איסוף מהחוג', time: '17:30', children: ['דני', 'יובל', 'נועה'] }
            ]
          }
        ]
      }
    ]
  };

  const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'];

  // פונקציה לחישוב גיל
  const calculateAge = (birthDate) => {
    if (!birthDate) return null;
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  };

  // פונקציה לבדיקת יום הולדת היום
  const getTodaysBirthdays = () => {
    const today = new Date();
    const todayMonth = today.getMonth() + 1;
    const todayDate = today.getDate();
    
    const birthdays = [];
    
    familyData.children.forEach(child => {
      if (child.birthDate) {
        const birth = new Date(child.birthDate);
        if (birth.getMonth() + 1 === todayMonth && birth.getDate() === todayDate) {
          birthdays.push({ name: child.name, isMyChild: true });
        }
      }
    });

    // בדיקה של ילדים מחוגים (לדוגמה - יובל לוי)
    if (todayMonth === 8 && todayDate === 13) {
      birthdays.push({ name: 'יובל לוי', isMyChild: false });
    }

    return birthdays;
  };

  // Chatbot processing function
  const processChatMessage = async (message) => {
    setIsProcessing(true);
    
    const userMessage = {
      id: Date.now(),
      type: 'user',
      message: message,
      timestamp: new Date().toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit' })
    };
    setChatMessages(prev => [...prev, userMessage]);

    setTimeout(() => {
      let botResponse = '';
      let scheduleChangeType = null;
      let requiresNewAvailability = false;

      if (message.includes('חולה') || message.includes('לא יכול') || message.includes('לא יכולה') || message.includes('חירום')) {
        botResponse = '🚨 **זוהתה בקשת חירום!**\n\n' +
          '📞 **פעולה מיידית:** שולח SMS לכל המשפחות בחוג\n' +
          '💬 תוכן ההודעה: ' + message + '\n\n' +
          '⚡ **חיפוש תחליף מהיר:**\n' +
          '• הודעה נשלחה לכל ההורים הזמינים\n' +
          '• בקשה דחופה למציאת תחליף\n\n' +
          '📋 **מה קורה עכשיו:**\n' +
          '1. כל המשפחות מקבלות התראה דחופה\n' +
          '2. המשפחה הראשונה שתענה תהיה התחליף\n' +
          '3. השיבוץ יעודכן אוטומטית ברגע שימצא תחליף\n' +
          '4. כולם יקבלו עדכון על התחליף החדש\n\n' +
          '⏰ **זמן תגובה צפוי:** 5-15 דקות';
        scheduleChangeType = { action: 'emergency_substitute', message: message, description: 'בקשת תחליף חירום' };
        requiresNewAvailability = false;
      } else if (message.includes('ביטול') || message.includes('לא יתקיים')) {
        botResponse = '✅ זוהה ביטול חוג.\n\n' +
          '📋 **שלב הבא:** יש למלא זמינות מחדש\n' +
          'נשלחה בקשה לכל המשפחות למלא זמינות עבור השבוע המעודכן.\n\n' +
          '⏳ **סטטוס מילוי זמינות:**\n' +
          '• משפחת דוד: ✅ מילא\n' +
          '• שאר המשפחות: ⏳ ממתינות\n\n' +
          'השיבוץ החדש יפורסם אוטומטית ברגע שכולם ימלאו זמינות.';
        scheduleChangeType = { action: 'cancel', description: 'ביטול חוג' };
        requiresNewAvailability = true;
      } else {
        botResponse = '✅ קיבלתי את ההודעה. אם זו הודעה מהמאמן שדורשת עדכון השיבוץ, אני יכול לעזור.\n\n' +
          'נושאים שאני יכול לטפל בהם:\n' +
          '• 🚨 **חירום** - הורה/ילד חולה (טיפול מיידי)\n' +
          '• ❌ ביטולי חוגים\n' +
          '• 🕐 שינויי שעות\n' +
          '• 📍 שינויי מיקום\n' +
          '• 🔄 בקשות החלפה רגילות\n' +
          '• 📅 לוחות זמנים חדשים\n\n' +
          'פשוט הדבק את ההודעה מהוואטסאפ והיא תעודכן אוטומטית!';
      }

      const botMessage = {
        id: Date.now() + 1,
        type: 'bot',
        message: botResponse,
        timestamp: new Date().toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit' }),
        scheduleUpdate: scheduleChangeType,
        requiresAvailability: requiresNewAvailability
      };
      
      setChatMessages(prev => [...prev, botMessage]);
      
      if (requiresNewAvailability && scheduleChangeType) {
        setPendingScheduleChange(scheduleChangeType);
        setAvailabilityStatus({
          'משפחת כהן': false,
          'משפחת לוי': false, 
          'משפחת אברהם': false,
          'משפחת דוד': true,
          'משפחת שלום': false,
          'משפחת חן': false
        });

        const newNotification = {
          id: Date.now() + 2,
          text: 'נדרש מילוי זמינות מחדש: ' + scheduleChangeType.description,
          type: 'warning',
          time: new Date().toLocaleTimeString('he-IL', { hour: '2-digit', minute: '2-digit' })
        };
        setNotifications(prev => [newNotification, ...prev]);
      }
      
      setIsProcessing(false);
    }, 2000);
  };

  const handleChatSubmit = (e) => {
    e.preventDefault();
    if (chatInput.trim()) {
      processChatMessage(chatInput.trim());
      setChatInput('');
    }
  };

  // Family Home Page Component
  const FamilyHomePage = () => {
    const todaysBirthdays = getTodaysBirthdays();
    
    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      // Header
      React.createElement('div', { className: 'bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-6 text-white' },
        React.createElement('h1', { className: 'text-2xl font-bold mb-2' }, 'שלום, ' + familyData.familyName + '!'),
        React.createElement('p', { className: 'text-blue-100' }, 'ניהול חוגים וקואורדינציה')
      ),

      // Birthday Messages
      todaysBirthdays.length > 0 && React.createElement('div', { className: 'space-y-2' },
        todaysBirthdays.map((birthday, index) =>
          React.createElement('div', { 
            key: index, 
            className: 'bg-gradient-to-r from-pink-500 to-yellow-500 rounded-xl p-4 text-white' 
          },
            React.createElement('div', { className: 'flex items-center' },
              React.createElement('span', { className: 'text-2xl ml-3' }, '🎉'),
              React.createElement('div', null,
                React.createElement('h3', { className: 'font-bold text-lg' }, 'יום הולדת שמח!'),
                React.createElement('p', { className: 'text-pink-100' }, 
                  birthday.isMyChild ? birthday.name + ' חוגג/ת היום' : birthday.name + ' מהחוג חוגג/ת היום'
                )
              )
            )
          )
        )
      ),

      // Quick Stats
      React.createElement('div', { className: 'grid grid-cols-3 gap-4' },
        React.createElement('div', { className: 'bg-green-50 rounded-lg p-4 text-center border border-green-200' },
          React.createElement('div', { className: 'text-2xl font-bold text-green-600' },
            familyData.children.reduce((total, child) => total + child.classes.length, 0)
          ),
          React.createElement('div', { className: 'text-sm text-green-700' }, 'חוגים פעילים')
        ),
        React.createElement('div', { className: 'bg-blue-50 rounded-lg p-4 text-center border border-blue-200' },
          React.createElement('div', { className: 'text-2xl font-bold text-blue-600' }, familyData.children.length),
          React.createElement('div', { className: 'text-sm text-blue-700' }, 'ילדים')
        ),
        React.createElement('div', { className: 'bg-purple-50 rounded-lg p-4 text-center border border-purple-200' },
          React.createElement('div', { className: 'text-2xl font-bold text-purple-600' },
            familyData.children.reduce((total, child) => 
              total + child.classes.reduce((classTotal, cls) => classTotal + cls.myTasks.length, 0), 0
            )
          ),
          React.createElement('div', { className: 'text-sm text-purple-700' }, 'משימות השבוע')
        )
      ),

      // Notifications
      notifications.length > 0 && React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-semibold mb-3 flex items-center' },
          React.createElement(Icon, { name: 'fas fa-bell', className: 'w-5 h-5 ml-2 text-orange-500' }),
          'התראות'
        ),
        notifications.map(notif =>
          React.createElement('div', { 
            key: notif.id, 
            className: 'p-3 rounded-lg mb-2 last:mb-0 ' + (
              notif.type === 'warning' ? 'bg-orange-50 border border-orange-200' : 'bg-blue-50 border border-blue-200'
            )
          },
            React.createElement('div', { className: 'flex justify-between items-start' },
              React.createElement('span', { className: 'text-sm' }, notif.text),
              React.createElement('span', { className: 'text-xs text-gray-500' }, notif.time)
            )
          )
        )
      ),

      // Children and Classes
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-semibold mb-4 flex items-center' },
          React.createElement(Icon, { name: 'fas fa-users', className: 'w-5 h-5 ml-2 text-blue-500' }),
          'הילדים והחוגים שלהם'
        ),
        
        familyData.children.map(child => {
          const age = calculateAge(child.birthDate);
          return React.createElement('div', { key: child.id, className: 'mb-6 last:mb-0' },
            React.createElement('div', { className: 'flex items-center justify-between mb-3' },
              React.createElement('h4', { className: 'font-medium text-lg' }, child.name),
              React.createElement('span', { className: 'text-sm text-gray-600' },
                age ? 'גיל ' + age : 'ללא גיל'
              )
            ),
            
            React.createElement('div', { className: 'grid gap-3' },
              child.classes.map(classItem =>
                React.createElement('div', { 
                  key: classItem.id,
                  onClick: () => {
                    setSelectedChild(child);
                    setSelectedClass(classItem);
                    setCurrentView('class-home');
                  },
                  className: 'bg-gray-50 border border-gray-200 rounded-lg p-4 cursor-pointer hover:bg-gray-100 transition-colors'
                },
                  React.createElement('div', { className: 'flex justify-between items-start' },
                    React.createElement('div', { className: 'flex-1' },
                      React.createElement('div', { className: 'font-medium text-blue-600' }, classItem.name),
                      React.createElement('div', { className: 'text-sm text-gray-600 mt-1' }, classItem.location),
                      React.createElement('div', { className: 'text-sm text-gray-500' }, classItem.schedule),
                      classItem.myTasks.length > 0 && React.createElement('div', { className: 'text-sm text-green-600 mt-1' },
                        classItem.myTasks.length + ' משימות השבוע'
                      )
                    ),
                    React.createElement(Icon, { name: 'fas fa-arrow-left', className: 'w-5 h-5 text-gray-400' })
                  )
                )
              ),
              
              React.createElement('button', { 
                onClick: () => setCurrentView('class-add-edit'),
                className: 'border border-dashed border-gray-300 rounded-lg p-4 text-gray-600 hover:bg-gray-50 transition-colors'
              },
                React.createElement(Icon, { name: 'fas fa-plus', className: 'w-5 h-5 mx-auto mb-1' }),
                React.createElement('div', { className: 'text-sm' }, 'הוסף חוג ל' + child.name)
              )
            )
          );
        }),
        
        React.createElement('button', { 
          onClick: () => setCurrentView('add-child'),
          className: 'w-full border border-dashed border-gray-300 rounded-lg p-4 text-gray-600 hover:bg-gray-50 transition-colors mt-4'
        },
          React.createElement(Icon, { name: 'fas fa-plus', className: 'w-5 h-5 mx-auto mb-1' }),
          React.createElement('div', { className: 'text-sm' }, 'הוסף ילד למשפחה')
        )
      ),

      // Quick Access to Waiting Room
      React.createElement('div', { className: 'bg-gradient-to-r from-green-500 to-blue-500 rounded-xl p-6 text-white' },
        React.createElement('div', { className: 'flex items-center mb-3' },
          React.createElement('span', { className: 'text-2xl ml-3' }, '🔍'),
          React.createElement('div', null,
            React.createElement('h3', { className: 'font-bold text-lg' }, 'מחפש קבוצת הסעות חדשה?'),
            React.createElement('p', { className: 'text-green-100 text-sm' }, 'מצא הורים לחוגים חדשים או צור קבוצה משלך')
          )
        ),
        React.createElement('button', { 
          onClick: () => setCurrentView('waiting-room'),
          className: 'bg-white bg-opacity-20 backdrop-blur-sm text-white border border-white border-opacity-30 rounded-lg px-6 py-3 font-medium hover:bg-opacity-30 transition-all'
        },
          '🚀 כנס לחדר המתנה'
        )
      ),

      // Admin Access (hidden button for admin)
      React.createElement('div', { className: 'text-center' },
        React.createElement('button', {
          onClick: () => setShowAdminLogin(true),
          className: 'text-xs text-gray-400 hover:text-gray-600 transition-colors',
          title: 'כניסה למנהל מערכת'
        }, 'ניהול מערכת')
      )
    );
  };

  // Class Home Page Component
  const ClassHomePage = () => {
    if (!selectedClass || !selectedChild) return null;

    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      // Header with back button
      React.createElement('div', { className: 'flex items-center mb-4' },
        React.createElement('button', { 
          onClick: () => setCurrentView('family-home'),
          className: 'ml-3 p-2 hover:bg-gray-100 rounded-lg'
        },
          React.createElement(Icon, { name: 'fas fa-home' })
        ),
        React.createElement('div', { className: 'flex-1' },
          React.createElement('h2', { className: 'text-xl font-bold' }, selectedClass.name),
          React.createElement('p', { className: 'text-gray-600' }, selectedChild.name + ' • ' + selectedClass.location)
        )
      ),

      // Class Info
      React.createElement('div', { className: 'bg-gradient-to-r from-green-600 to-blue-600 rounded-xl p-6 text-white' },
        React.createElement('h3', { className: 'text-lg font-bold mb-2' }, selectedClass.name),
        React.createElement('div', { className: 'space-y-1 text-green-100' },
          React.createElement('div', { className: 'flex items-center' },
            React.createElement(Icon, { name: 'fas fa-map-marker-alt', className: 'w-4 h-4 ml-2' }),
            React.createElement('span', null, selectedClass.address)
          ),
          React.createElement('div', { className: 'flex items-center' },
            React.createElement(Icon, { name: 'fas fa-clock', className: 'w-4 h-4 ml-2' }),
            React.createElement('span', null, selectedClass.schedule)
          ),
          React.createElement('div', { className: 'flex items-center' },
            React.createElement(Icon, { name: 'fas fa-phone', className: 'w-4 h-4 ml-2' }),
            React.createElement('span', null, selectedClass.coach)
          )
        )
      ),

      // Quick Actions
      React.createElement('div', { className: 'grid grid-cols-2 gap-4' },
        React.createElement('button', { 
          onClick: () => setCurrentView('availability'),
          className: 'bg-blue-600 text-white rounded-lg p-4 hover:bg-blue-700 transition-colors'
        },
          React.createElement(Icon, { name: 'fas fa-clock', className: 'w-6 h-6 mx-auto mb-2' }),
          React.createElement('span', { className: 'block text-sm font-medium' }, 'מלא זמינות')
        ),
        React.createElement('button', { 
          onClick: () => setCurrentView('class-families'),
          className: 'bg-purple-600 text-white rounded-lg p-4 hover:bg-purple-700 transition-colors'
        },
          React.createElement(Icon, { name: 'fas fa-users', className: 'w-6 h-6 mx-auto mb-2' }),
          React.createElement('span', { className: 'block text-sm font-medium' }, 'משפחות בחוג')
        )
      )
    );
  };

  // ChatBot Page Component
  const ChatBotPage = () => (
    React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('h2', { className: 'text-xl font-bold' }, 'עוזר החוגים'),
      
      React.createElement('div', { className: 'bg-blue-50 border border-blue-200 rounded-lg p-4' },
        React.createElement('div', { className: 'flex items-center mb-2' },
          React.createElement('div', { className: 'w-3 h-3 bg-green-400 rounded-full ml-2' }),
          React.createElement('span', { className: 'font-medium text-blue-800' }, 'עוזר פעיל')
        ),
        React.createElement('p', { className: 'text-sm text-blue-700' },
          'שלח הודעות מהמאמן או כתוב שינויים ישירות. העוזר יעדכן את השיבוץ השבועי אוטומטית!'
        )
      ),

      // Chat Messages
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200' },
        React.createElement('div', { className: 'h-80 overflow-y-auto p-4 space-y-4' },
          chatMessages.map(msg =>
            React.createElement('div', { 
              key: msg.id, 
              className: 'flex ' + (msg.type === 'user' ? 'justify-start' : 'justify-end')
            },
              React.createElement('div', { 
                className: 'max-w-sm p-3 rounded-lg ' + (
                  msg.type === 'user' 
                    ? 'bg-gray-100 text-gray-800' 
                    : 'bg-blue-100 text-blue-800'
                )
              },
                React.createElement('div', { className: 'whitespace-pre-wrap text-sm' }, msg.message),
                React.createElement('div', { className: 'text-xs text-gray-500 mt-2' }, msg.timestamp),
                msg.scheduleUpdate && React.createElement('div', { 
                  className: 'mt-2 p-2 bg-green-50 border border-green-200 rounded text-xs text-green-700'
                },
                  '✅ השיבוץ עודכן בהתאם'
                )
              )
            )
          ),
          
          isProcessing && React.createElement('div', { className: 'flex justify-end' },
            React.createElement('div', { className: 'bg-blue-100 text-blue-800 p-3 rounded-lg' },
              React.createElement('div', { className: 'flex items-center text-sm' },
                React.createElement('div', { className: 'animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full ml-2' }),
                'מעבד הודעה...'
              )
            )
          )
        ),

        // Chat Input
        React.createElement('div', { className: 'border-t border-gray-200 p-4' },
          React.createElement('form', { onSubmit: handleChatSubmit, className: 'space-y-3' },
            React.createElement('div', { className: 'flex space-x-2 space-x-reverse' },
              React.createElement('input', {
                type: 'text',
                value: chatInput,
                onChange: (e) => setChatInput(e.target.value),
                placeholder: 'הדבק הודעה מוואטסאפ או כתוב שינוי...',
                className: 'flex-1 p-3 border border-gray-300 rounded-lg text-right',
                disabled: isProcessing
              }),
              React.createElement('button', {
                type: 'submit',
                disabled: isProcessing || !chatInput.trim(),
                className: 'bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 font-medium'
              },
                'שלח'
              )
            )
          ),
          
          // Quick Actions
          React.createElement('div', { className: 'mt-3 flex flex-wrap gap-2' },
            React.createElement('button', {
              onClick: () => setChatInput('הילד שלי חולה לא יכול להגיע לחוג היום'),
              className: 'px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm hover:bg-red-200'
            },
              '🚨 חירום - ילד חולה'
            ),
            React.createElement('button', {
              onClick: () => setChatInput('אני חולה לא יכול להסיע היום'),
              className: 'px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm hover:bg-red-200'
            },
              '🚨 חירום - הורה חולה'
            ),
            React.createElement('button', {
              onClick: () => setChatInput('ביטול חוג ביום ראשון'),
              className: 'px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200'
            },
              'ביטול חוג'
            )
          )
        )
      ),

      // Usage Tips
      React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },
        React.createElement('h3', { className: 'font-medium text-green-800 mb-2' }, '💡 טיפים לשימוש:'),
        React.createElement('ul', { className: 'text-sm text-green-700 space-y-1' },
          React.createElement('li', null, '• העתק והדבק הודעות ישירות מקבוצת הוואטסאפ'),
          React.createElement('li', null, '• כתוב שינויים בעברית פשוטה'),
          React.createElement('li', null, '• העוזר יזהה אוטומטית ביטולים, שינויי שעות ובקשות החלפה'),
          React.createElement('li', null, '• כל עדכון ישלח התראה למשפחות הרלוונטיות')
        )
      )
    )
  );

  // Navigation Component
  const Navigation = () => {
    const getNavItems = () => {
      if (isAdminMode) {
        return [
          { id: 'admin-dashboard', icon: 'fas fa-chart-bar', label: 'לוח מחוונים' },
          { id: 'admin-families', icon: 'fas fa-users', label: 'משפחות' },
          { id: 'admin-classes', icon: 'fas fa-calendar', label: 'חוגים' },
          { id: 'admin-reports', icon: 'fas fa-clipboard-list', label: 'דוחות' }
        ];
      } else if (currentView === 'family-home' || currentView === 'chatbot' || currentView === 'settings' || currentView === 'user-guide' || currentView === 'waiting-room' || currentView === 'create-group') {
        return [
          { id: 'family-home', icon: 'fas fa-home', label: 'בית' },
          { id: 'waiting-room', icon: 'fas fa-users', label: 'חדר המתנה' },
          { id: 'chatbot', icon: 'fas fa-bell', label: 'עוזר החוגים' },
          { id: 'settings', icon: 'fas fa-cog', label: 'הגדרות' }
        ];
      } else {
        return [
          { id: 'family-home', icon: 'fas fa-home', label: 'בית המשפחה' },
          { id: 'class-home', icon: 'fas fa-calendar', label: 'החוג' },
          { id: 'availability', icon: 'fas fa-clock', label: 'זמינות' },
          { id: 'class-families', icon: 'fas fa-users', label: 'משפחות' }
        ];
      }
    };

    return React.createElement('div', { 
      className: 'fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2', 
      dir: 'rtl' 
    },
      React.createElement('div', { className: 'flex justify-around' },
        getNavItems().map(item =>
          React.createElement('button', {
            key: item.id,
            onClick: () => setCurrentView(item.id),
            className: 'flex flex-col items-center py-2 px-3 rounded-lg transition-colors ' + (
              currentView === item.id 
                ? 'text-blue-600 bg-blue-50' 
                : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'
            )
          },
            React.createElement(Icon, { name: item.icon, className: 'w-5 h-5 mb-1' }),
            React.createElement('span', { className: 'text-xs' }, item.label)
          )
        )
      )
    );
  };

  // Settings Page Component
  const SettingsPage = () => (
    React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('h2', { className: 'text-xl font-bold' }, 'הגדרות'),
      
      // Profile Section
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-4 flex items-center' },
          React.createElement(Icon, { name: 'fas fa-users', className: 'w-5 h-5 ml-2 text-blue-500' }),
          'פרטים אישיים'
        ),
        React.createElement('div', { className: 'space-y-4' },
          // Family Name
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'שם משפחה ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: familyData.familyName, 
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          ),

          // Parent 1
          React.createElement('div', { className: 'bg-blue-50 rounded-lg p-3 border border-blue-200' },
            React.createElement('h4', { className: 'font-medium text-blue-800 mb-3' }, 'הורה 1'),
            React.createElement('div', { className: 'space-y-3' },
              React.createElement('div', null,
                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                  'שם פרטי ',
                  React.createElement('span', { className: 'text-red-500' }, '*')
                ),
                React.createElement('input', { 
                  type: 'text', 
                  placeholder: 'יוסי',
                  defaultValue: familyData.parents.parent1.name,
                  className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
                  required: true
                })
              ),
              React.createElement('div', null,
                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                  'טלפון ',
                  React.createElement('span', { className: 'text-red-500' }, '*')
                ),
                React.createElement('input', { 
                  type: 'tel', 
                  placeholder: '050-123-4567',
                  defaultValue: familyData.parents.parent1.phone,
                  className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
                  required: true
                })
              ),
              React.createElement('div', null,
                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                  'אימייל (רשות)'
                ),
                React.createElement('input', { 
                  type: 'email', 
                  placeholder: 'yossi@gmail.com',
                  defaultValue: familyData.parents.parent1.email,
                  className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
                })
              )
            )
          ),

          // Parent 2
          React.createElement('div', { className: 'bg-pink-50 rounded-lg p-3 border border-pink-200' },
            React.createElement('h4', { className: 'font-medium text-pink-800 mb-3' }, 'הורה 2'),
            React.createElement('div', { className: 'space-y-3' },
              React.createElement('div', null,
                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                  'שם פרטי ',
