    const handleCancel = () => {
      setChildForm({ name: '', birthDate: '', phone: '', address: '' });
      setCurrentView('family-home');
    };

    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' }, 'הוסף ילד למשפחה'),
        React.createElement('button', { 
          onClick: handleCancel,
          className: 'text-gray-600 hover:text-gray-800'
        }, 'ביטול')
      ),

      React.createElement('div', { className: 'bg-blue-50 border border-blue-200 rounded-lg p-4' },
        React.createElement('div', { className: 'flex items-center mb-2' },
          React.createElement('span', { className: 'text-2xl ml-3' }, '👶'),
          React.createElement('div', null,
            React.createElement('h3', { className: 'font-bold text-blue-800' }, 'הוסף ילד חדש'),
            React.createElement('p', { className: 'text-blue-700 text-sm' },
              'מלא את פרטי הילד כדי להוסיף אותו למשפחה'
            )
          )
        )
      ),

      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-4' }, 'פרטי הילד'),
        React.createElement('div', { className: 'space-y-4' },
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'שם הילד ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: childForm.name,
              onChange: (e) => setChildForm(prev => ({ ...prev, name: e.target.value })),
              placeholder: 'דני כהן',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          ),

          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'תאריך לידה (רשות)'
            ),
            React.createElement('input', { 
              type: 'date', 
              value: childForm.birthDate,
              onChange: (e) => setChildForm(prev => ({ ...prev, birthDate: e.target.value })),
              className: 'w-full p-2 border border-gray-300 rounded-lg'
            }),
            childForm.birthDate && React.createElement('div', { className: 'text-xs text-gray-500 mt-1' },
              'גיל: ' + calculateAge(childForm.birthDate) + ' שנים'
            )
          ),

          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'טלפון הילד (רשות)'
            ),
            React.createElement('input', { 
              type: 'tel', 
              value: childForm.phone,
              onChange: (e) => setChildForm(prev => ({ ...prev, phone: e.target.value })),
              placeholder: '050-111-2222',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
            })
          ),

          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'כתובת הבית ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: childForm.address,
              onChange: (e) => setChildForm(prev => ({ ...prev, address: e.target.value })),
              placeholder: 'רח\' הרצל 123, תל אביב',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          )
        )
      ),

      React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },
        React.createElement('h3', { className: 'font-medium text-green-800 mb-2' }, 'מה הלאה?'),
        React.createElement('p', { className: 'text-sm text-green-700' },
          'לאחר שתוסיף את הילד, תוכל להוסיף לו חוגים דרך מסך הבית או דרך ההגדרות.'
        )
      ),

      React.createElement('div', { className: 'flex space-x-4 space-x-reverse' },
        React.createElement('button', { 
          onClick: handleSaveChild,
          className: 'flex-1 bg-blue-600 text-white rounded-lg py-3 font-medium hover:bg-blue-700'
        }, 'הוסף ילד'),
        React.createElement('button', { 
          onClick: handleCancel,
          className: 'flex-1 bg-gray-200 text-gray-700 rounded-lg py-3 font-medium hover:bg-gray-300'
        }, 'ביטול')
      )
    );
  };

  // Admin Families Management
  const AdminFamiliesPage = () => {
    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' }, '👨‍👩‍👧‍👦 ניהול משפחות'),
        React.createElement('button', { 
          onClick: () => setCurrentView('admin-dashboard'),
          className: 'text-gray-600 hover:text-gray-800'
        }, 'חזור ללוח מחוונים')
      ),

      // Families Table
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 overflow-hidden' },
        React.createElement('div', { className: 'p-4 bg-gray-50 border-b' },
          React.createElement('h3', { className: 'font-medium' }, 'כל המשפחות במערכת (' + allFamilies.length + ')')
        ),
        
        React.createElement('div', { className: 'divide-y divide-gray-200' },
          allFamilies.map(family =>
            React.createElement('div', { key: family.id, className: 'p-4 hover:bg-gray-50' },
              React.createElement('div', { className: 'flex items-center justify-between' },
                React.createElement('div', { className: 'flex-1' },
                  React.createElement('h4', { className: 'font-medium text-lg' }, family.name),
                  React.createElement('div', { className: 'text-sm text-gray-600 space-y-1 mt-2' },
                    React.createElement('div', null, '👶 ' + family.children + ' ילדים • ⚽ ' + family.activeClasses + ' חוגים פעילים'),
                    React.createElement('div', null, '📞 ' + family.phone + ' • ✉️ ' + family.email),
                    React.createElement('div', null, '📅 פעילות אחרונה: ' + family.lastActive)
                  )
                ),
                
                React.createElement('div', { className: 'flex flex-col items-end space-y-2' },
                  React.createElement('span', { 
                    className: 'px-3 py-1 rounded-full text-xs ' + (
                      family.availabilityStatus === 'מילא זמינות' ? 'bg-green-100 text-green-700' : 
                      family.availabilityStatus === 'ממלא זמינות' ? 'bg-yellow-100 text-yellow-700' :
                      'bg-red-100 text-red-700'
                    )
                  }, family.availabilityStatus),
                  
                  React.createElement('div', { className: 'flex space-x-2 space-x-reverse' },
                    React.createElement('button', {
                      onClick: () => alert('פתיחת פרופיל ' + family.name),
                      className: 'px-3 py-1 bg-blue-100 text-blue-700 rounded text-xs hover:bg-blue-200'
                    }, 'צפייה'),
                    React.createElement('button', {
                      onClick: () => alert('שליחת הודעה ל' + family.name),
                      className: 'px-3 py-1 bg-green-100 text-green-700 rounded text-xs hover:bg-green-200'
                    }, 'הודעה'),
                    React.createElement('button', {
                      onClick: () => alert('עריכת פרטי ' + family.name),
                      className: 'px-3 py-1 bg-orange-100 text-orange-700 rounded text-xs hover:bg-orange-200'
                    }, 'עריכה')
                  )
                )
              )
            )
          )
        )
      ),

      // Quick Stats
      React.createElement('div', { className: 'grid grid-cols-4 gap-4' },
        React.createElement('div', { className: 'bg-blue-50 rounded-lg p-3 border border-blue-200 text-center' },
          React.createElement('div', { className: 'text-2xl font-bold text-blue-600' }, 
            allFamilies.filter(f => f.availabilityStatus === 'מילא זמינות').length
          ),
          React.createElement('div', { className: 'text-sm text-blue-700' }, 'מילאו זמינות')
        ),
        React.createElement('div', { className: 'bg-yellow-50 rounded-lg p-3 border border-yellow-200 text-center' },
          React.createElement('div', { className: 'text-2xl font-bold text-yellow-600' }, 
            allFamilies.filter(f => f.availabilityStatus === 'ממלא זמינות').length
          ),
          React.createElement('div', { className: 'text-sm text-yellow-700' }, 'ממלאים זמינות')
        ),
        React.createElement('div', { className: 'bg-red-50 rounded-lg p-3 border border-red-200 text-center' },
          React.createElement('div', { className: 'text-2xl font-bold text-red-600' }, 
            allFamilies.filter(f => f.availabilityStatus === 'לא מילא זמינות').length
          ),
          React.createElement('div', { className: 'text-sm text-red-700' }, 'ללא זמינות')
        ),
        React.createElement('div', { className: 'bg-green-50 rounded-lg p-3 border border-green-200 text-center' },
          React.createElement('div', { className: 'text-2xl font-bold text-green-600' }, 
            allFamilies.reduce((sum, f) => sum + f.children, 0)
          ),
          React.createElement('div', { className: 'text-sm text-green-700' }, 'סה״כ ילדים')
        )
      )
    );
  };

  // Admin Classes Management
  const AdminClassesPage = () => {
    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' }, '⚽ ניהול חוגים'),
        React.createElement('button', { 
          onClick: () => setCurrentView('admin-dashboard'),
          className: 'text-gray-600 hover:text-gray-800'
        }, 'חזור ללוח מחוונים')
      ),

      // Classes Grid
      React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 gap-4' },
        availableClasses.map(classItem =>
          React.createElement('div', { key: classItem.id, className: 'bg-white rounded-lg border border-gray-200 p-4' },
            React.createElement('div', { className: 'flex justify-between items-start mb-3' },
              React.createElement('div', null,
                React.createElement('h4', { className: 'font-bold text-lg text-blue-600' }, classItem.name),
                React.createElement('div', { className: 'text-sm text-gray-600' }, classItem.location + ', ' + classItem.city)
              ),
              React.createElement('span', { className: 'bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs' }, 
                '#' + classItem.id
              )
            ),
            
            React.createElement('div', { className: 'space-y-2 text-sm text-gray-700 mb-4' },
              React.createElement('div', null, '🕰️ ' + classItem.schedule),
              React.createElement('div', null, '👨‍🏫 מאמן: ' + classItem.coach),
              React.createElement('div', null, '👶 גילאים: ' + classItem.ageGroup),
              React.createElement('div', null, '👥 ' + classItem.currentMembers + '/' + classItem.maxMembers + ' משתתפים')
            ),
            
            React.createElement('div', { className: 'flex space-x-2 space-x-reverse' },
              React.createElement('button', {
                onClick: () => alert('צפייה בפרטי חוג ' + classItem.name),
                className: 'flex-1 bg-blue-100 text-blue-700 py-2 rounded text-xs hover:bg-blue-200'
              }, 'צפייה מלאה'),
              React.createElement('button', {
                onClick: () => alert('עריכת חוג ' + classItem.name),
                className: 'px-4 py-2 bg-orange-100 text-orange-700 rounded text-xs hover:bg-orange-200'
              }, 'עריכה')
            )
          )
        )
      )
    );
  };

  // Admin Reports Page
  const AdminReportsPage = () => {
    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' }, '📊 דוחות וסטטיסטיקות'),
        React.createElement('button', { 
          onClick: () => setCurrentView('admin-dashboard'),
          className: 'text-gray-600 hover:text-gray-800'
        }, 'חזור ללוח מחוונים')
      ),

      // Reports Grid
      React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 gap-6' },
        React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
          React.createElement('h3', { className: 'font-medium mb-4' }, '🔄 סטטיסטיקות זמינות'),
          React.createElement('div', { className: 'space-y-2 text-sm' },
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'משפחות שמילאו זמינות:'),
              React.createElement('span', { className: 'font-medium' }, '18/24 (75%)')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'זמני בוקר זמינים:'),
              React.createElement('span', { className: 'font-medium' }, '142/168 (85%)')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'זמני אחה"צ זמינים:'),
              React.createElement('span', { className: 'font-medium' }, '156/168 (93%)')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'זמני ערב זמינים:'),
              React.createElement('span', { className: 'font-medium' }, '98/168 (58%)')
            )
          )
        ),
        
        React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
          React.createElement('h3', { className: 'font-medium mb-4' }, '🚗 סטטיסטיקות הסעות'),
          React.createElement('div', { className: 'space-y-2 text-sm' },
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'סה"כ נסיעות השבוע:'),
              React.createElement('span', { className: 'font-medium' }, '156 נסיעות')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'משפחות עם איזון מלא:'),
              React.createElement('span', { className: 'font-medium text-green-600' }, '16/24 (67%)')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'משפחות עם חריגה:'),
              React.createElement('span', { className: 'font-medium text-red-600' }, '3/24 (13%)')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'ממוצע נסיעות למשפחה:'),
              React.createElement('span', { className: 'font-medium' }, '6.5 נסיעות')
            )
          )
        ),
        
        React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
          React.createElement('h3', { className: 'font-medium mb-4' }, '⚠️ תרוות חירום'),
          React.createElement('div', { className: 'space-y-2 text-sm' },
            React.createElement('div', { className: 'p-2 bg-red-50 rounded' },
              React.createElement('div', { className: 'font-medium text-red-800' }, 'משפחת אברהם - לא מילא זמינות'),
              React.createElement('div', { className: 'text-red-600 text-xs' }, 'לא מילא זמינות לחוג כדורסל כבר 3 שבועות')
            ),
            React.createElement('div', { className: 'p-2 bg-yellow-50 rounded' },
              React.createElement('div', { className: 'font-medium text-yellow-800' }, 'משפחת שלום - חריגה בנסיעות'),
              React.createElement('div', { className: 'text-yellow-600 text-xs' }, 'נסעה רק 2 פעמים השבוע במקום 6')
            )
          )
        ),
        
        React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
          React.createElement('h3', { className: 'font-medium mb-4' }, '📨 פעילות עוזר חוגים'),
          React.createElement('div', { className: 'space-y-2 text-sm' },
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'הודעות שנשלחו היום:'),
              React.createElement('span', { className: 'font-medium' }, '23 הודעות')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'בקשות חירום:'),
              React.createElement('span', { className: 'font-medium text-red-600' }, '4 בקשות')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'ביטולי חוגים:'),
              React.createElement('span', { className: 'font-medium' }, '2 ביטולים')
            ),
            React.createElement('div', { className: 'flex justify-between' },
              React.createElement('span', null, 'זמן תגובה ממוצע:'),
              React.createElement('span', { className: 'font-medium' }, '8 דקות')
            )
          )
        )
      )
    );
  };

  // Class Add/Edit Component
  const ClassAddEditPage = () => {
    const isEditing = !!editingClass;
    
    const addAddress = () => {
      setClassForm(prev => ({
        ...prev,
        addresses: [...prev.addresses, { name: '', address: '' }]
      }));
    };

    const removeAddress = (index) => {
      if (classForm.addresses.length > 1) {
        setClassForm(prev => ({
          ...prev,
          addresses: prev.addresses.filter((_, i) => i !== index)
        }));
      }
    };

    const updateAddress = (index, field, value) => {
      setClassForm(prev => ({
        ...prev,
        addresses: prev.addresses.map((addr, i) => 
          i === index ? { ...addr, [field]: value } : addr
        )
      }));
    };

    const addSession = () => {
      setClassForm(prev => ({
        ...prev,
        sessions: [...prev.sessions, { day: '', startTime: '', endTime: '', addressIndex: 0 }]
      }));
    };

    const removeSession = (index) => {
      if (classForm.sessions.length > 1) {
        setClassForm(prev => ({
          ...prev,
          sessions: prev.sessions.filter((_, i) => i !== index)
        }));
      }
    };

    const updateSession = (index, field, value) => {
      setClassForm(prev => ({
        ...prev,
        sessions: prev.sessions.map((session, i) => 
          i === index ? { ...session, [field]: value } : session
        )
      }));
    };

    const handleSave = () => {
      if (!classForm.name || !classForm.addresses[0].address || !classForm.coachName) {
        alert('אנא מלא את השדות החובה');
        return;
      }

      console.log('שמירת חוג:', classForm);
      alert(isEditing ? 'החוג עודכן בהצלחה!' : 'החוג נוצר בהצלחה!');
      setCurrentView('settings');
      setIsEditingClass(false);
      setEditingClass(null);
      // Reset form
      setClassForm({
        name: '',
        addresses: [{ name: '', address: '' }],
        sessions: [{ day: '', startTime: '', endTime: '', addressIndex: 0 }],
        coachName: '',
        coachPhone: '',
        managerName: '',
        managerPhone: '',
        managerEmail: ''
      });
    };

    const handleCancel = () => {
      setCurrentView('settings');
      setIsEditingClass(false);
      setEditingClass(null);
      // Reset form
      setClassForm({
        name: '',
        addresses: [{ name: '', address: '' }],
        sessions: [{ day: '', startTime: '', endTime: '', addressIndex: 0 }],
        coachName: '',
        coachPhone: '',
        managerName: '',
        managerPhone: '',
        managerEmail: ''
      });
    };

    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' },
          isEditing ? 'ערוך חוג' : 'הוסף חוג חדש'
        ),
        React.createElement('button', { 
          onClick: handleCancel,
          className: 'text-gray-600 hover:text-gray-800'
        }, 'ביטול')
      ),

      // Class Name
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-4' }, 'פרטי החוג'),
        React.createElement('div', { className: 'space-y-4' },
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'שם החוג ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: classForm.name,
              onChange: (e) => setClassForm(prev => ({ ...prev, name: e.target.value })),
              placeholder: 'כדורסל, שחייה, ריקוד...',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          )
        )
      ),

      // Addresses
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('div', { className: 'flex justify-between items-center mb-4' },
          React.createElement('h3', { className: 'font-medium' }, 'כתובות החוג'),
          React.createElement('button', { 
            onClick: addAddress,
            className: 'text-blue-600 text-sm hover:text-blue-800'
          }, '+ הוסף כתובת')
        ),
        
        React.createElement('div', { className: 'space-y-4' },
          classForm.addresses.map((address, index) =>
            React.createElement('div', { key: index, className: 'bg-gray-50 rounded-lg p-3 border border-gray-200' },
              React.createElement('div', { className: 'flex justify-between items-center mb-3' },
                React.createElement('h4', { className: 'font-medium text-sm' }, 'כתובת ' + (index + 1)),
                classForm.addresses.length > 1 && React.createElement('button', { 
                  onClick: () => removeAddress(index),
                  className: 'text-red-600 text-sm hover:text-red-800'
                }, 'הסר')
              ),
              
              React.createElement('div', { className: 'space-y-3' },
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                    'שם המקום (רשות)'
                  ),
                  React.createElement('input', { 
                    type: 'text', 
                    value: address.name,
                    onChange: (e) => updateAddress(index, 'name', e.target.value),
                    placeholder: 'בית ספר רמת אביב, בריכת העיר...',
                    className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
                  })
                ),
                
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                    'כתובת ',
                    React.createElement('span', { className: 'text-red-500' }, '*')
                  ),
                  React.createElement('input', { 
                    type: 'text', 
                    value: address.address,
                    onChange: (e) => updateAddress(index, 'address', e.target.value),
                    placeholder: 'רח׳ הרצל 45, תל אביב',
                    className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
                    required: true
                  })
                )
              )
            )
          )
        )
      ),

      // Sessions
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('div', { className: 'flex justify-between items-center mb-4' },
          React.createElement('h3', { className: 'font-medium' }, 'מופעי החוג'),
          React.createElement('button', { 
            onClick: addSession,
            className: 'text-blue-600 text-sm hover:text-blue-800'
          }, '+ הוסף מופע')
        ),
        
        React.createElement('div', { className: 'space-y-4' },
          classForm.sessions.map((session, index) =>
            React.createElement('div', { key: index, className: 'bg-blue-50 rounded-lg p-3 border border-blue-200' },
              React.createElement('div', { className: 'flex justify-between items-center mb-3' },
                React.createElement('h4', { className: 'font-medium text-sm text-blue-800' }, 'מופע ' + (index + 1)),
                classForm.sessions.length > 1 && React.createElement('button', { 
                  onClick: () => removeSession(index),
                  className: 'text-red-600 text-sm hover:text-red-800'
                }, 'הסר')
              ),
              
              React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 gap-3' },
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                    'יום ',
                    React.createElement('span', { className: 'text-red-500' }, '*')
                  ),
                  React.createElement('select', { 
                    value: session.day,
                    onChange: (e) => updateSession(index, 'day', e.target.value),
                    className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
                    required: true
                  },
                    React.createElement('option', { value: '' }, 'בחר יום'),
                    days.map(day => React.createElement('option', { key: day, value: day }, day))
                  )
                ),
                
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' }, 'מיקום'),
                  React.createElement('select', { 
                    value: session.addressIndex,
                    onChange: (e) => updateSession(index, 'addressIndex', parseInt(e.target.value)),
                    className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
                  },
                    classForm.addresses.map((addr, addrIndex) =>
                      React.createElement('option', { key: addrIndex, value: addrIndex },
                        addr.name || ('כתובת ' + (addrIndex + 1))
                      )
                    )
                  )
                ),
                
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                    'שעת התחלה ',
                    React.createElement('span', { className: 'text-red-500' }, '*')
                  ),
                  React.createElement('input', { 
                    type: 'time', 
                    value: session.startTime,
                    onChange: (e) => updateSession(index, 'startTime', e.target.value),
                    className: 'w-full p-2 border border-gray-300 rounded-lg',
                    required: true
                  })
                ),
                
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
                    'שעת סיום ',
                    React.createElement('span', { className: 'text-red-500' }, '*')
                  ),
                  React.createElement('input', { 
                    type: 'time', 
                    value: session.endTime,
                    onChange: (e) => updateSession(index, 'endTime', e.target.value),
                    className: 'w-full p-2 border border-gray-300 rounded-lg',
                    required: true
                  })
                )
              )
            )
          )
        )
      ),

      // Coach Details
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-4' }, 'פרטי המאמן'),
        React.createElement('div', { className: 'space-y-4' },
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'שם המאמן ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: classForm.coachName,
              onChange: (e) => setClassForm(prev => ({ ...prev, coachName: e.target.value })),
              placeholder: 'דוד כהן',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          ),
          
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'טלפון המאמן'
            ),
            React.createElement('input', { 
              type: 'tel', 
              value: classForm.coachPhone,
              onChange: (e) => setClassForm(prev => ({ ...prev, coachPhone: e.target.value })),
              placeholder: '052-987-6543',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
            })
          )
        )
      ),

      // Class Manager Details
      React.createElement('div', { className: 'bg-blue-50 rounded-lg border border-blue-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-4 text-blue-800' }, '👑 מנהל החוג'),
        React.createElement('p', { className: 'text-sm text-blue-700 mb-4' },
          'מנהל החוג אחראי על תיאום הזמינות, זירוז הורים שלא מגיבים ופתירת בעיות.'
        ),
        React.createElement('div', { className: 'space-y-4' },
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'שם המנהל ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'text', 
              value: classForm.managerName,
              onChange: (e) => setClassForm(prev => ({ ...prev, managerName: e.target.value })),
              placeholder: 'יוסי כהן',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          ),
          
          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'טלפון המנהל ',
              React.createElement('span', { className: 'text-red-500' }, '*')
            ),
            React.createElement('input', { 
              type: 'tel', 
              value: classForm.managerPhone,
              onChange: (e) => setClassForm(prev => ({ ...prev, managerPhone: e.target.value })),
              placeholder: '050-123-4567',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right',
              required: true
            })
          ),

          React.createElement('div', null,
            React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-1' },
              'אימייל המנהל (רשות)'
            ),
            React.createElement('input', { 
              type: 'email', 
              value: classForm.managerEmail,
              onChange: (e) => setClassForm(prev => ({ ...prev, managerEmail: e.target.value })),
              placeholder: 'yossi@gmail.com',
              className: 'w-full p-2 border border-gray-300 rounded-lg text-right'
            })
          )
        )
      ),

      // Action Buttons
      React.createElement('div', { className: 'flex space-x-4 space-x-reverse' },
        React.createElement('button', { 
          onClick: handleSave,
          className: 'flex-1 bg-blue-600 text-white rounded-lg py-3 font-medium hover:bg-blue-700'
        }, isEditing ? 'שמור שינויים' : 'צור חוג'),
        React.createElement('button', { 
          onClick: handleCancel,
          className: 'flex-1 bg-gray-200 text-gray-700 rounded-lg py-3 font-medium hover:bg-gray-300'
        }, 'ביטול')
      )
    );
  };

  const AvailabilityPage = () => {
    const timeSlots = [
      { key: 'morning', label: 'בוקר', time: '07:00-12:00', color: 'yellow' },
      { key: 'afternoon', label: 'אחר הצהריים', time: '12:00-17:00', color: 'blue' },
      { key: 'evening', label: 'ערב', time: '17:00-22:00', color: 'purple' }
    ];

    const toggleAvailability = (day, timeSlot) => {
      setWeeklyAvailability(prev => ({
        ...prev,
        [day]: {
          ...prev[day],
          [timeSlot]: !prev[day][timeSlot]
        }
      }));
    };

    const selectAllDay = (day) => {
      setWeeklyAvailability(prev => ({
        ...prev,
        [day]: {
          morning: true,
          afternoon: true,
          evening: true
        }
      }));
    };

    const clearAllDay = (day) => {
      setWeeklyAvailability(prev => ({
        ...prev,
        [day]: {
          morning: false,
          afternoon: false,
          evening: false
        }
      }));
    };

    const saveAvailability = () => {
      console.log('שמירת זמינות:', weeklyAvailability);
      alert('הזלינות שלך נשמרה בהצלחה!');
      setCurrentView('class-home');
    };

    const getAvailabilityCount = () => {
      let count = 0;
      Object.values(weeklyAvailability).forEach(day => {
        Object.values(day).forEach(slot => {
          if (slot) count++;
        });
      });
      return count;
    };

    return React.createElement('div', { className: 'space-y-6', dir: 'rtl' },
      React.createElement('div', { className: 'flex items-center justify-between' },
        React.createElement('h2', { className: 'text-xl font-bold' }, 'זמינות שבועית'),
        React.createElement('button', { 
          onClick: () => setCurrentView('class-home'),
          className: 'text-gray-600 hover:text-gray-800'
        }, 'חזור')
      ),

      // Info Card
      React.createElement('div', { className: 'bg-blue-50 border border-blue-200 rounded-lg p-4' },
        React.createElement('div', { className: 'flex items-center mb-2' },
          React.createElement('span', { className: 'text-2xl ml-3' }, '📅'),
          React.createElement('div', null,
            React.createElement('h3', { className: 'font-bold text-blue-800' }, 'מלא זמינות להסעות'),
            React.createElement('p', { className: 'text-blue-700 text-sm' },
              'בחר את השעות בהן אתה זמין להסיע או לאסוף מהחוג'
            )
          )
        ),
        React.createElement('div', { className: 'mt-3 text-sm text-blue-700' },
          'נבחרו: ' + getAvailabilityCount() + ' מתוך 21 זמנים'
        )
      ),

      // Time Legend
      React.createElement('div', { className: 'bg-white rounded-lg border border-gray-200 p-4' },
        React.createElement('h3', { className: 'font-medium mb-3' }, 'מפתח צבעים'),
        React.createElement('div', { className: 'grid grid-cols-3 gap-2 text-sm' },
          timeSlots.map(slot =>
            React.createElement('div', { key: slot.key, className: 'flex items-center' },
              React.createElement('div', { 
                className: 'w-4 h-4 rounded ml-2 bg-' + slot.color + '-200 border border-' + slot.color + '-300' 
              }),
